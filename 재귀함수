/*
15649번 n과 m(1)

해석: m개의 공간에 각각 걸맞는 n개중 하나의 수를 집어넣는다. 오름차순으로 진행된다. 

필요한 작업: 해당숫자가 확인하는 배열 u[9]를 설정한다. u[i]가 0일경우 a[i]가 사용되지 않았다는뜻, 즉 사용할수 있다는뜻, u[i]가 1일경우 사용되었으므로 추가할수 없다는 뜻이 되어야 한다.
	    
	   u[i]에 대한 판단을 하고 a[i]에 집어넣거나 집어넣지 않는 작업을 한후, a[i]를 찾기 위해 다시 f()함수를 재귀호출한다. 이는 선택한 숫자가 m개가 될때까지 중첩될것이고, 각 위치에서 모든 작업을 수행하면 그 전단계로 다시 돌아간후 배열에 지정했던 해당 숫자를 지정해제한다.

주의: a[8]과 다르게 u[9]는 9개의 공간을 가지는 이유는 u[]배열은 1부터 8의 값을 가지는 n의 인덱스에 값을 집어넣기 때문이다. 즉 u[1]부터 u[8]까지 값이 정해져야 하므로 u[9]가 선언되어야 한다.

*/

#include <iostream>
using namespace std;

int n, m, a[8], u[9];
void f(int choose) {
	if (choose == m){
		for (int i = 0; i < m; i++) {
			cout << a[i] << ' ';
		}
		cout << '\n';
		return ;
	}

	for (int i = 1; i <= n; i++) {
		if (u[i] == 0) {
			a[choose] = i; u[i] = 1;
			f(choose + 1);
			a[choose] = 0; u[i] = 0;

		}

	}
}

int main() {
	cin >> n>> m;
	f(0);
}



/*
15650번 n과 m(2)
해석: m개의 공간에 각각 걸맞는 n개중 하나의 수를 집어넣는다. 오름차순으로 진행된다. m개의 공간이 있는 배열은 무조건 오름차순이다.

필요한 작업: m개의 공간에 n개의 숫자를 각각 상황에 대입시켜가며 조건에 만족할경우 해당 숫자를 배열에 집어넣는다.
 	    a[i-1]보다 해당 숫자가 클경우에만 a[i]에 해당 숫자를 집어넣는다.

*/

#include <iostream>
using namespace std;

int n, m, a[8];
void f(int choose) {
	if (choose == m){
		for (int i = 0; i < m; i++) {
			cout << a[i] << ' ';
		}
		cout << '\n';
		return;
	}

	for (int i = 1; i <= n; i++) {
		if (choose ==0 || a[choose-1]<i){
			a[choose] = i;
			f(choose + 1);

		}

	}
}

int main() {
	cin >> n>> m;
	f(0);
}





/* 
11729번 하노이 탑 이동순서

해석: n-1개의 원판을 먼저 a에서 b로 옮긴다 -> 제일 밑에있던 원판을 c로 옮긴다 -> 그위로 b에 옮겨놨던 n-1개의 원판을 다시 c로 옮기는 작업을한다

필요한 작업: n-1이 0이 될때마다 작업을 더이상 수행할수 없으므로 마지막으로 수행한 작업을 출력한다.

주의: 
- 실제로 변수의 값을 서로 바꾸는 작업을 하지는 않고 표면상에서 '여기서 여기로 바꾼다는 표현'만 매개변수에 대입 순서를 서로 바꿔가며 출력하는것이므로 헷갈리지말기
- c++ 에서는 std::count 라는 이름이 이미 정의되있으므로 무조건 cnt라고 변수 설정하기 
*/
#include <iostream>
using namespace std;
int cnt=0;
void f(int n, int a, int b, int c) {
	if (n == 1) {
		cout << a << ' ' << c << '\n';
		return;
	}
	f(n - 1, a, c, b);
	f(1, a, b, c);
	f(n - 1, b, a, c);
}

void v(int n, int a, int b, int c) {

	if (n == 1) {
		cnt++;
		return;
	}
	v(n - 1, a, c, b);
	cnt++;
	v(n - 1, b, a, c);
}

int main() {
	int n;
	cin >> n;
	v(n, 1, 2, 3);
	cout << cnt << '\n';
	f(n, 1, 2, 3);
	return 0;
}
